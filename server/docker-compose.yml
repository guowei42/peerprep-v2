services:
  gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "80:80"

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      args:
        - PORT=${PORT_USER}
    ports:
      - ${PORT_USER}:${PORT_USER}
    networks:
      - backend
    environment:
      - ENV
      - DB_CLOUD_URI=${DB_URI_USER}
      - DB_LOCAL_URI=${DB_URI_USER}
      - JWT_SECRET

  qn-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile
      args:
        - PORT=${PORT_QUESTION}
    ports:
      - ${PORT_QUESTION}:${PORT_QUESTION}
    networks:
      - backend
    environment:
      - ENV
      - DB_CLOUD_URI=${DB_URI_QUESTION}

  collab-service:
    build:
      context: ./collaboration-service
      dockerfile: Dockerfile
      args:
        - PORT=${PORT_COLLABORATION}
    networks:
      - backend
    ports:
      - ${PORT_COLLABORATION}:${PORT_COLLABORATION}
    environment:
      - ENV

  matching-redis:
    image: redis
    networks:
      - matching
    expose:
      - 6379

  match-service:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
      args:
        - PORT=${PORT_MATCHING}
    ports:
      - ${PORT_MATCHING}:${PORT_MATCHING}
    depends_on:
      - matching-redis
    networks:
      - matching
      - backend
    environment:
      - ENV
      - REDIS_URL=redis://matching-redis:6379
  chat-service:
    build: 
      context: ./chat-service
      dockerfile: Dockerfile
      args:
        - PORT=${PORT_CHAT}
    networks:
      - backend
    ports:
      - ${PORT_CHAT}:${PORT_CHAT}
    environment:
      - ENV

  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - backend
    volumes:
      - mongo-data:/data/db

networks:
  matching:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongo-data:
